snippet     if
abbr        if ... end
  if ${1:#:condition}
    ${2:TARGET}
  end

snippet     def
abbr        def ... end
  def ${1:#:method_name}
    ${2:TARGET}
  end

snippet     defrescue
alias       defr
abbr        def ... rescue ... end
  def ${1:#:method_name}
    ${2:TARGET}
  rescue ${3:#:StandardError} => ${4:error}
    ${5}
  end

snippet     do
abbr        do ... end
  do
    ${1:TARGET}
  end

snippet     dovar
abbr        do |var| ... end
  do |${1:#:var}|
    ${2:TARGET}
  end

snippet     block
abbr        { ... }
  {
    ${1:TARGET}
  }

snippet     blockvar
abbr        {|var| ... }
  { |${1:#:var}|
    ${2:TARGET}
  }

snippet     fileopen
alias       open
abbr        File.open(filename) do ... end
  File.open(${1:#:filename}, '${2:#:mode}') do |${3:io}|
    ${0:TARGET}
  end

snippet     edn
abbr        => end?
  end

snippet     urlencode
  # coding: utf-8
  require 'erb'
  puts ERB::Util.url_encode '${1}'

snippet encoding
alias   enc
  # coding: utf-8
  ${0}

snippet each
options word
  each { |${1:#:variable}| ${2} }

snippet each_do
options word
  each do |${1:#:variable}|
    ${2}
  end

snippet each_byte
options word
  each_byte { |${1:#:variable}| ${2} }

snippet each_char
options word
  each_char { |${1:#:variable}| ${2} }

snippet each_index
options word
  each_index { |${1:#:variable}| ${2} }

snippet each_key
options word
  each_key { |${1:#:variable}| ${2} }

snippet each_line
options word
  each_line { |${1:#:variable}| ${2} }

snippet each_with_index
options word
  each_with_index { |${1:#:variable}| ${2} }

snippet each_pair
options word
  each_pair{ |${1:#:key},${2:value}| ${3} }

snippet each_pair_do
options word
  each_pair |${1:key},${2:value}| do
    ${3}
  end

snippet each_slice
abbr each_slice(n) { ... } → nil
options word
  each_slice(${1:#:value}) { |${2:#:variable}| ${0} }

snippet all
options word
  all? { |${1:#:variable}| ${2} }

snippet all_do
options word
  all? |${1:#:variable}| do
    ${2}
  end

snippet any
options word
  any? { |${1:#:variable}| ${2} }

snippet any_do
options word
  any? |${1:#:variable}| do
    ${2}
  end

snippet count
abbr count(item) → int
options word
  count(${1:#:value})

snippet count_block
abbr count { |obj| block } → int
options word
  count { |${1:#:variable}| ${2} }

snippet find
alias detect
options word
  find { |${1:#:variable}| ${2} }

snippet find_do
alias detect_do
options word
  find |${1:#:variable}| do
    ${2}
  end

snippet find_all
abbr find_all { |obj| block } → array
alias select
options word
  find_all { |${1:#:variable}| ${2} }

snippet group_by
abbr group_by { |obj| block } → a_hash
options word
  group_by { |${1:1:variable}| ${2} }

snippet group_by_do
options word
  group_by |${1:#variable}| do
    ${2}
  end

snippet inject
abbr inject(initial) { |memo, obj| block } → obj
alias reduce
options word
  inject(${1:#:initial}) { |${2:#:memo},${3:#:obj}| ${0} }

snippet max
abbr max { |a, b| block } → obj
options word
  max { |${1:a},${2:b}| ${0} }

snippet map
alias collect
options word
  map { |${1:#:variable}| ${2} }

snippet map_do
alias collect_do
options word
  map |${1:#:variable}| do
    ${2}
  end

snippet sort
options word
  sort { |${1:#:variable}| ${2} }

snippet sort_by
options word
  sort_by { |${1:#:variable}| ${2} }

snippet lambda
options word
  -> (${1:#:args}) { ${2} }

snippet lambda-keyword
options word
  lambda { |${1:#:args}| ${2} }

snippet     main
options     head
  if __FILE__ == \$0
    ${0:TARGET}
  end

# This idiom is only for legacy ruby such as 1.9.3
snippet filedir-legacy-compatibility
alias __dir__
abbr File.dirname(...)
  File.dirname(File.expand_path(__FILE__))

snippet     glob
options     head
  Dir.glob(${1:'**/*'}) do |fname|
    ${0:TARGET}
  end

snippet     case
abbr        case ... when ... else ... end
options     head
  case ${1}
  when ${2}
    ${3}
  else
    ${4}
  end

snippet     class
  class ${1:#:Name}
    ${0}
  end

snippet     module
  module ${1:#:Name}
    ${0}
  end

# vim:set et ts=2 sts=2 sw=2 tw=0:
